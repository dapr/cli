# ------------------------------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
# ------------------------------------------------------------

name: dapr_cli

on:
  push:
    branches:
      - master
      - release-*
    tags:
      - v*
  pull_request:
    branches:
      - master
      - release-*
jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOVER: 1.15
      GOLANG_CI_LINT_VER: v1.31
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        target_arch: [arm, arm64, amd64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-latest
            target_os: windows
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: windows-latest
            target_arch: arm
          - os: windows-latest
            target_arch: arm64
          - os: macOS-latest
            target_arch: arm
          - os: macOS-latest
            target_arch: arm64
    steps:
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Run golangci-lint
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: golangci/golangci-lint-action@v2
        with:
          version: ${{ env.GOLANG_CI_LINT_VER }}
          only-new-issues: true
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py
      - name: Run make test
        env:
          COVERAGE_OPTS: "-coverprofile=coverage.txt -covermode=atomic"
        if: matrix.target_arch == 'amd64'
        run: make test
      - name: Codecov
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: codecov/codecov-action@v1
      - name: Run make release to build and archive binaries
        run: |
          mkdir -p ${{ env.ARCHIVE_OUTDIR }}
          make release GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} ARCHIVE_OUT_DIR=${{ env.ARCHIVE_OUTDIR }}
      - name: Create release_version.txt
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: |
          [ ! -z "${{ env.REL_VERSION }}" ] && echo "${{ env.REL_VERSION }}" > "${{ env.ARCHIVE_OUTDIR }}/release_version.txt"
      - name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: cli_drop
          path: ${{ env.ARCHIVE_OUTDIR }}
  publish:
    name: Publish binaries
    needs: build
    if: startswith(github.ref, 'refs/tags/v')
    env:
      ARTIFACT_DIR: ./release
    runs-on: ubuntu-latest
    steps:
      - name: download artifacts
        uses: actions/download-artifact@master
        with:
          name: cli_drop
          path: ${{ env.ARTIFACT_DIR }}
      - name: Set Release Version
        run: |
          REL_VERSION_FILE="${{ env.ARTIFACT_DIR }}/release_version.txt"
          REL_VER=`cat ${REL_VERSION_FILE}`
          echo "REL_VERSION=${REL_VER}" >> $GITHUB_ENV
          rm -f ${REL_VERSION_FILE}
      - name: publish binaries to github
        if: startswith(github.ref, 'refs/tags/v')
        run: |
          echo "installing github-release-cli..."
          sudo npm install --silent --no-progress -g github-release-cli@1.3.1
          # Get the list of files
          RELEASE_ARTIFACT=(${ARTIFACT_DIR}/*)
          # Parse repository to get owner and repo names
          OWNER_NAME="${GITHUB_REPOSITORY%%/*}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          export GITHUB_TOKEN=${{ secrets.RELEASE_USER_TOKEN }}
          echo "Uploading Dapr CLI Binaries to GitHub Release"
          github-release upload \
            --owner $OWNER_NAME --repo $REPO_NAME \
            --tag "v${REL_VERSION}" \
            --name "Dapr CLI v${REL_VERSION}" \
            --prerelease true \
            ${RELEASE_ARTIFACT[*]}
