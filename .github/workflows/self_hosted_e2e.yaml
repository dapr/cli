# ------------------------------------------------------------
# Copyright 2021 The Dapr Authors
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------

name: E2E - Self-hosted

on:
  push:
    branches:
      - master
      - release-*
    paths-ignore:
      - '**.md'
  schedule:
    - cron: '0 */3 * * *'
    - cron: '0 */6 * * *'
  pull_request:
    branches:
      - master
      - 'release-*'
    paths-ignore:
      - '**.md'

jobs:
  self-hosted-e2e:
    name: Run Self-Hosted E2E tests in ${{ matrix.target_os }}_${{ matrix.target_arch }}_${{ matrix.dapr_install_mode }}
    runs-on: ${{ matrix.os }}
    env:
      GOVER: 1.19.3
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
      DAPR_RUNTIME_PINNED_VERSION: "1.10.0-rc.1"
      DAPR_DASHBOARD_PINNED_VERSION: 0.11.0
      DAPR_RUNTIME_LATEST_VERSION:
      DAPR_DASHBOARD_LATEST_VERSION:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        target_arch: [amd64]
        dapr_install_mode: [slim, complete]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: macOS-latest
            target_os: darwin
          - os: windows-latest
            target_os: windows
        exclude:
          - os: windows-latest
            dapr_install_mode: complete
    steps:
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Install podman - MacOS
        if: matrix.os == 'macos-latest' && matrix.dapr_install_mode == 'complete'
        run: |
          sudo rm -rf `brew --cache`
          brew upgrade
          brew install podman
          which podman-mac-helper
          podman_helper=$(which podman-mac-helper)
          sudo ${podman_helper} install
          podman machine init
          podman machine start
          echo "CONTAINER_RUNTIME=podman" >> $GITHUB_ENV
      - name: Determine latest stable Dapr Runtime version
        run: |
          export RUNTIME_VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/dapr/dapr/releases/latest | grep tag_name | awk -F':' '{print $2}' | tr -d '", ' | sed '/-/! s/$/_/' | sort -V | sed 's/_$//' | tr -d 'v' | tail -1)
          if [[ -z "$RUNTIME_VERSION" ]]; then
            echo "Could not fetch the latest Dapr Runtime version. Using default version $DAPR_RUNTIME_PINNED_VERSION"
            echo "DAPR_RUNTIME_LATEST_VERSION=$DAPR_RUNTIME_PINNED_VERSION" >> $GITHUB_ENV
          else
            echo "Found $RUNTIME_VERSION"
            echo "DAPR_RUNTIME_LATEST_VERSION=$RUNTIME_VERSION" >> $GITHUB_ENV
            base_ref=${{ github.base_ref }}
            echo "Branch $base_ref"
            if [[ $base_ref = 'master' ]]; then
              echo "DAPR_RUNTIME_PINNED_VERSION=$RUNTIME_VERSION" >> $GITHUB_ENV
            fi
          fi
        shell: bash
      - name: Determine latest stable Dapr Dashboard version
        run: |
          export DASHBOARD_VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/dapr/dashboard/releases/latest | grep tag_name | awk -F':' '{print $2}' | tr -d '", ' | sed '/-/! s/$/_/' | sort -V | sed 's/_$//' | tr -d 'v' | tail -1)
          if [[ -z "$DASHBOARD_VERSION" ]]; then
            echo "Could not fetch the latest Dapr Dashboard version. Using default version $DAPR_DASHBOARD_PINNED_VERSION"
            echo "DAPR_DASHBOARD_LATEST_VERSION=$DAPR_DASHBOARD_PINNED_VERSION" >> $GITHUB_ENV
          else
            echo "Found $DASHBOARD_VERSION"
            echo "DAPR_DASHBOARD_LATEST_VERSION=$DASHBOARD_VERSION" >> $GITHUB_ENV
            base_ref=${{ github.base_ref }}
            echo "Branch $base_ref"
            if [[ $base_ref = 'master' ]]; then
              echo "DAPR_DASHBOARD_PINNED_VERSION=$DASHBOARD_VERSION" >> $GITHUB_ENV
            fi
          fi
        shell: bash
      - name: Set the test timeout - MacOS
        if: matrix.os == 'macos-latest'
        run: echo "E2E_SH_TEST_TIMEOUT=30m" >> $GITHUB_ENV
      - name: Run E2E tests with GHCR
        # runs every 6hrs
        if: github.event.schedule == '0 */6 * * *'
        env:
          DAPR_DEFAULT_IMAGE_REGISTRY: ghcr
          DAPR_E2E_INIT_SLIM: ${{ contains(matrix.os, 'windows-latest') || contains(matrix.dapr_install_mode, 'slim') }}
          CONTAINER_RUNTIME: ${{ env.CONTAINER_RUNTIME }}
          E2E_SH_TEST_TIMEOUT: ${{ env.E2E_SH_TEST_TIMEOUT }}
        run: |
          export TEST_OUTPUT_FILE=$GITHUB_WORKSPACE/test-e2e-standalone.json
          echo "TEST_OUTPUT_FILE=$TEST_OUTPUT_FILE" >> $GITHUB_ENV
          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          make e2e-build-run-sh
        shell: bash
      - name: Run E2E tests with Docker hub
        if: github.event.schedule != '0 */6 * * *'
        env:
          DAPR_E2E_INIT_SLIM: ${{ contains(matrix.os, 'windows-latest') || contains(matrix.dapr_install_mode, 'slim') }}
          CONTAINER_RUNTIME: ${{ env.CONTAINER_RUNTIME }}
          E2E_SH_TEST_TIMEOUT: ${{ env.E2E_SH_TEST_TIMEOUT }}
        run: |
          export TEST_OUTPUT_FILE=$GITHUB_WORKSPACE/test-e2e-standalone.json
          echo "TEST_OUTPUT_FILE=$TEST_OUTPUT_FILE" >> $GITHUB_ENV
          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          make e2e-build-run-sh
        shell: bash
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.target_os }}_${{ matrix.target_arch }}_e2e_standalone.json
          path: ${{ env.TEST_OUTPUT_FILE }}
