# dapr/cli build pipeline

# Release process - https://github.com/dapr/dapr/wiki/Release-Process

trigger:
  branches:
    include:
    - master
  tags:
    include:
    - v*

variables:
  GOPATH: '$(system.defaultWorkingDirectory)/gopath'
  GOBIN:  '$(GOPATH)/bin'
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)'

jobs:
- job: release_environment
  pool:
    vmImage: ubuntu-latest
  steps:
    - script: |
        SOURCEBRANCH=$(Build.SourceBranch)
        echo Source branch name : $SOURCEBRANCH
        if [[ $SOURCEBRANCH != refs/tags/v* ]]; then
          echo Clearing REL_VERSION value unless $SOURCEBRANCH is refs/tags/v.
          RELVERSION=""
          echo "##vso[task.setvariable variable=REL_VERSION;isOutput=true]$RELVERSION"
          exit 0
        fi
        RELVERSION=${SOURCEBRANCH#refs/tags/v}
        echo Release version : $RELVERSION
  
        echo "##vso[task.setvariable variable=REL_VERSION;isOutput=true]$RELVERSION"
        echo $RELVERSION > $(Build.ArtifactStagingDirectory)/release_version.txt
        echo $(Build.SourceVersion) > $(Build.ArtifactStagingDirectory)/release_commit_id.txt

        # Check if RELVERSION is not release candidates
        if [[ "$RELVERSION" != *-rc.* ]]; then
          echo Add release tag
          echo "##vso[build.addbuildtag]release"
        fi
      name: env_var_step
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
- template: 'build-template.yml'
  parameters:
    poolImage: macOS-latest
    targetOS: darwin
    targetArch: amd64
    dependStep: release_environment
    relVersion: $[ dependencies.release_environment.outputs['env_var_step.REL_VERSION'] ]
- template: 'build-template.yml'
  parameters:
    poolImage: ubuntu-latest
    targetOS: linux
    targetArch: amd64
    dependStep: release_environment
    relVersion: $[ dependencies.release_environment.outputs['env_var_step.REL_VERSION'] ]
- template: 'build-template.yml'
  parameters:
    poolImage: 'windows-2019'
    targetOS: windows
    targetArch: amd64
    dependStep: release_environment
    relVersion: $[ dependencies.release_environment.outputs['env_var_step.REL_VERSION'] ]
- template: 'build-template.yml'
  parameters:
    poolImage: ubuntu-latest
    targetOS: linux
    targetArch: arm
    dependStep: release_environment
    relVersion: $[ dependencies.release_environment.outputs['env_var_step.REL_VERSION'] ]
- job: 'release_to_github'
  pool:
    vmImage: ubuntu-latest
  dependsOn:	
    - build_darwin_amd64_dapr	
    - build_linux_amd64_dapr	
    - build_windows_amd64_dapr	
    - build_linux_arm_dapr
    - release_environment
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
  variables:
    REL_VERSION: $[ dependencies.release_environment.outputs['env_var_step.REL_VERSION'] ]
  steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        itemPattern: '**'
        targetPath: '$(Pipeline.Workspace)'
    - task: GitHubRelease@0
      condition: and(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), contains(variables['Build.SourceBranch'], '-rc'))
      displayName: 'Upload Dapr CLI binaries to GitHub Pre-release'
      inputs:
        gitHubConnection: 'GitHub'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'manual'
        tag: 'v$(REL_VERSION)'
        title: 'Dapr CLI $(REL_VERSION)'
        assets: |
          $(Pipeline.Workspace)/drop/*.zip
          $(Pipeline.Workspace)/drop/*.tar.gz
        isPreRelease: true
        addChangeLog: true
    - task: GitHubRelease@0
      condition: and(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), not(contains(variables['Build.SourceBranch'], '-rc')))
      displayName: 'Upload Dapr CLI binaries to GitHub Release'
      inputs:
        gitHubConnection: 'GitHub'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'manual'
        tag: 'v$(REL_VERSION)'
        title: 'Dapr CLI $(REL_VERSION)'
        assets: |
          $(Pipeline.Workspace)/drop/*.zip
          $(Pipeline.Workspace)/drop/*.tar.gz
        isPreRelease: false
        addChangeLog: true