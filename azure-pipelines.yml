# actionscore/cli build pipeline

trigger:
- master
- release-*

variables:
  GOPATH: '$(system.defaultWorkingDirectory)/gopath'
  GOBIN:  '$(GOPATH)/bin'
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)'

jobs:
- job: release_environment
  pool:
    vmImage: ubuntu-latest
  steps:
    - script: |
        SOURCEBRANCH=$(Build.SourceBranchName)
        echo Source branch name : $SOURCEBRANCH
        if [[ $SOURCEBRANCH != release-* ]]; then
          echo Clearing REL_VERSION value unless $SOURCEBRANCH is release-*.
          RELVERSION=""
          echo "##vso[task.setvariable variable=REL_VERSION;isOutput=true]$RELVERSION"
          exit 0
        fi
        BRANCH_VERSION=${SOURCEBRANCH#release-}
        echo Release branch version : $BRANCH_VERSION
        
        RELEASE_VERSION=$(git tag -l "v$BRANCH_VERSION-*" | tail -1)
        [ -z "$RELEASE_VERSION" ] && echo "Cannot find the release version tag!" && exit 1
        
        RELVERSION=${RELEASE_VERSION#v*}
        echo Release Version in tag : $RELVERSION
  
        echo "##vso[task.setvariable variable=REL_VERSION;isOutput=true]$RELVERSION"
        echo $RELVERSION > $(Build.ArtifactStagingDirectory)/release_version.txt
        echo $(Build.SourceVersion) > $(Build.ArtifactStagingDirectory)/release_commit_id.txt

        echo Checking release note for $RELVERSION...
        RELNOTE_PATH="docs/release_notes/v$RELVERSION.md"
        if [ -f "$RELNOTE_PATH" ]; then
          echo Found release note $RELNOTE_PATH and copying to artifact directory
          cp $RELNOTE_PATH $(Build.ArtifactStagingDirectory)/release_note.md
          echo Add release tag
          echo "##vso[build.addbuildtag]release"
        else
          echo Skip releasing release note. this is not final release.
          echo "##vso[build.addbuildtag]release"
        fi
      name: env_var_step
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
- template: 'build-template.yml'
  parameters:
    poolImage: macOS-latest
    targetOS: darwin
    targetArch: amd64
    dependStep: release_environment
    relVersion: $[ dependencies.release_environment.outputs['env_var_step.REL_VERSION'] ]
- template: 'build-template.yml'
  parameters:
    poolImage: ubuntu-latest
    targetOS: linux
    targetArch: amd64
    dependStep: release_environment
    relVersion: $[ dependencies.release_environment.outputs['env_var_step.REL_VERSION'] ]
- template: 'build-template.yml'
  parameters:
    poolImage: 'windows-2019'
    targetOS: windows
    targetArch: amd64
    dependStep: release_environment
    relVersion: $[ dependencies.release_environment.outputs['env_var_step.REL_VERSION'] ]
- template: 'build-template.yml'
  parameters:
    poolImage: ubuntu-latest
    targetOS: linux
    targetArch: arm
    dependStep: release_environment
    relVersion: $[ dependencies.release_environment.outputs['env_var_step.REL_VERSION'] ]
- template: 'build-template.yml'
  parameters:
    poolImage: ubuntu-latest
    targetOS: linux
    targetArch: arm64
    dependStep: release_environment
    relVersion: $[ dependencies.release_environment.outputs['env_var_step.REL_VERSION'] ]
- job: 'publish_edge_binaries'
  pool:
    vmImage: 'windows-2019'
  dependsOn:	
    - build_darwin_amd64_actions	
    - build_linux_amd64_actions	
    - build_windows_amd64_actions	
    - build_linux_arm_actions	
    - build_linux_arm64_actions
    - release_environment
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        itemPattern: '**/*.zip'
        targetPath: '$(Pipeline.Workspace)'
    - task: AzureFileCopy@3
      inputs:
          SourcePath: '$(Pipeline.Workspace)/drop'
          azureSubscription: 'Actions Releases'
          Destination: 'AzureBlob'
          storage: 'actionsreleases'
          ContainerName: 'bin'